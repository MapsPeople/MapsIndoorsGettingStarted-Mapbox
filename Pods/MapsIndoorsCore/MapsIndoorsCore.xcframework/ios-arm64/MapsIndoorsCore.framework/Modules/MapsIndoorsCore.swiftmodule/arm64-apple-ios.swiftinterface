// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MapsIndoorsCore
import CoreLocation
import Foundation
import GameplayKit
import MapsIndoors
@_exported import MapsIndoorsCore
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let LRUCacheMemoryWarningNotification: Foundation.NSNotification.Name
final public class LRUCache<Key, Value> where Key : Swift.Hashable {
  final public var totalCost: Swift.Int {
    get
  }
  final public var totalCostLimit: Swift.Int {
    get
    set
  }
  final public var countLimit: Swift.Int {
    get
    set
  }
  public init(totalCostLimit: Swift.Int = .max, countLimit: Swift.Int = .max, notificationCenter: Foundation.NotificationCenter = .default)
  @objc deinit
}
extension MapsIndoorsCore.LRUCache {
  final public var count: Swift.Int {
    get
  }
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var allValues: [Value] {
    get
  }
  final public func setValue(_ value: Value?, forKey key: Key, cost: Swift.Int = 0)
  @discardableResult
  final public func removeValue(forKey key: Key) -> Value?
  final public func value(forKey key: Key) -> Value?
  final public func removeAllValues()
}
@objc public class MPLiveDataInfo : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let domainTypes: [Swift.String]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class MPTransitDetailsInternal : MapsIndoors.MPTransitDetails, Swift.Codable {
  @objc public var arrival_stop: (any MapsIndoors.MPTransitStop)?
  @objc public var arrival_time: (any MapsIndoors.MPTransitTime)?
  @objc public var departure_stop: (any MapsIndoors.MPTransitStop)?
  @objc public var departure_time: (any MapsIndoors.MPTransitTime)?
  @objc public var headsign: Swift.String?
  @objc public var headway: Foundation.NSNumber?
  @objc public var line: (any MapsIndoors.MPTransitLine)?
  @objc public var num_stops: Foundation.NSNumber?
  public init()
  public init(withTransitDetails: any MapsIndoors.MPTransitDetails)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MPAuthClientInfoInternal) public class MPAuthClientInfoInternal : ObjectiveC.NSObject, MapsIndoors.MPAuthClientInfo, Swift.Decodable {
  @objc public var clientID: Swift.String {
    get
  }
  @objc public var preferredIDPS: [Swift.String] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol MPRoutingService {
  #if compiler(>=5.3) && $AsyncAwait
  func routeFor(solutionId: Swift.String?, graphId: Swift.String?, directionsConfig: MapsIndoorsCore.MPDirectionsConfig) async throws -> MapsIndoorsCore.MPRouteInternal?
  #endif
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MPRouteStepInternal : ObjectiveC.NSObject, MapsIndoors.MPRouteStep, Swift.Codable {
  @objc public var distance: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var end_location: any MapsIndoors.MPRouteCoordinate
  @objc public var geometry: [any MapsIndoors.MPRouteCoordinate]?
  @objc public var highway: MapsIndoors.MPHighway
  @objc public var html_instructions: Swift.String
  @objc public var maneuver: Swift.String
  @objc public var polyline: (any MapsIndoors.MPEncodedPolyline)?
  @objc public var routeContext: Swift.String?
  @objc public var start_location: any MapsIndoors.MPRouteCoordinate
  @objc public var steps: [any MapsIndoors.MPRouteStep]?
  @objc public var transit_details: (any MapsIndoors.MPTransitDetails)?
  @objc public var travel_mode: Swift.String
  @objc public var endPoint: MapsIndoors.MPPoint {
    @objc get
  }
  @objc public var startPoint: MapsIndoors.MPPoint {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(withRouteStep: any MapsIndoors.MPRouteStep)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MPLiveDataManager : ObjectiveC.NSObject {
  @objc public var delegate: (any MapsIndoorsCore.MPLiveDataManagerDelegate)? {
    @objc get
    @objc set
  }
  @objc public static let sharedInstance: MapsIndoorsCore.MPLiveDataManager
  @objc public func invalidateSubscriptionState()
  @objc public func updateSubscriptions()
  @objc deinit
}
extension MapsIndoorsCore.MPLiveDataManager : MapsIndoors.MPLocationsObserver {
  @objc dynamic public func onLocationsDelete(_ locations: [Swift.String], source: any MapsIndoors.MPLocationSource)
  @objc dynamic public func onLocationsUpdate(_ locationUpdates: [any MapsIndoors.MPLocation], source: any MapsIndoors.MPLocationSource)
  @objc dynamic public func onStatusChange(_ status: MapsIndoors.MPLocationSourceStatus, source: any MapsIndoors.MPLocationSource)
}
extension MapsIndoorsCore.MPLiveDataManager : MapsIndoors.MPSubscriptionClientDelegate {
  @objc dynamic public func didReceiveMessage(_ message: Foundation.Data, onTopic: Swift.String)
  @objc dynamic public func didSubscribe(_ topic: any MapsIndoors.MPSubscriptionTopic)
  @objc dynamic public func didUnsubscribe(_ topic: any MapsIndoors.MPSubscriptionTopic)
  @objc dynamic public func didUpdateState(_ state: MapsIndoors.MPSubscriptionState)
  @objc dynamic public func onError(_ error: any Swift.Error)
  @objc dynamic public func onSubscriptionError(_ error: any Swift.Error, topic: any MapsIndoors.MPSubscriptionTopic)
  @objc dynamic public func onUnsubscriptionError(_ error: any Swift.Error, topic: any MapsIndoors.MPSubscriptionTopic)
}
@objc public enum MPLiveDataManagerState : Swift.Int {
  case closed
  case connecting
  case connected
  case disconnecting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MPLiveDataManagerDelegate {
  @objc func didReceive(liveUpdate: MapsIndoors.MPLiveUpdate)
  @objc func didUpdate(state: MapsIndoorsCore.MPLiveDataManagerState)
  @objc func didSubscribe(topic: MapsIndoors.MPLiveTopicCriteria)
  @objc func didUnsubscribe(topic: MapsIndoors.MPLiveTopicCriteria)
  @objc func onSubscriptionError(_ error: any Swift.Error, topic: MapsIndoors.MPLiveTopicCriteria)
  @objc func onUnsubscriptionError(_ error: any Swift.Error, topic: MapsIndoors.MPLiveTopicCriteria)
  @objc func onError(_ error: any Swift.Error)
  @objc func didReceiveLiveDataInfo(_ info: MapsIndoorsCore.MPLiveDataInfo)
}
@objc public class MPRouteStopIconConfig : ObjectiveC.NSObject, Swift.Codable, MapsIndoors.MPRouteStopIconProvider {
  @objc public var image: UIKit.UIImage?
  public var numbered: Swift.Bool
  public var label: Swift.String?
  public var color: UIKit.UIColor
  public init(numbered: Swift.Bool = true, label: Swift.String? = nil, color: UIKit.UIColor = UIColor(hex: "#EF4444")!)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MapsIndoorsCore.MPVenueInternal {
  @objc dynamic public func determineHasGraph() -> Swift.Bool
}
public protocol MPViewModel : Swift.Hashable {
  var id: Swift.String { get }
  var marker: MapsIndoorsCore.MPViewModelFeature? { get set }
  var polygon: MapsIndoorsCore.MPViewModelFeature? { get set }
  var polyline: MapsIndoorsCore.MPViewModelFeature? { get set }
  var model2D: MapsIndoorsCore.MPViewModelFeature? { get set }
  var model3D: MapsIndoorsCore.MPViewModelFeature? { get set }
  var wallExtrusion: MapsIndoorsCore.MPViewModelFeature? { get set }
  var floorPlanExtrusion: MapsIndoorsCore.MPViewModelFeature? { get set }
  var featureExtrusion: MapsIndoorsCore.MPViewModelFeature? { get set }
  var data: [MapsIndoorsCore.MPModelData : Any?] { get set }
  var showInfoWindow: Swift.Bool { get set }
  var isClickable: Swift.Bool { get set }
}
extension MapsIndoorsCore.MPViewModel {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class MPVenueLocationSource : ObjectiveC.NSObject, MapsIndoors.MPLocationSource {
  @objc final public let sourceId: Swift.Int
  @objc public var status: MapsIndoors.MPLocationSourceStatus {
    @objc get
    @objc set
  }
  @objc required public init(solutionId: Swift.String, venueId: Swift.String, language: Swift.String, userRoles: [MapsIndoors.MPUserRole] = [])
  @objc public func addLocationsObserver(_ observer: any MapsIndoors.MPLocationsObserver)
  @objc public func removeLocationsObserver(_ observer: any MapsIndoors.MPLocationsObserver)
  public func removeAllObservers()
  public func kill()
  @objc public func getLocations() -> [any MapsIndoors.MPLocation]
  @objc public func notify(liveUpdate: MapsIndoors.MPLiveUpdate)
  @objc deinit
}
public protocol MPCameraOperator {
  func move(target: CoreLocation.CLLocationCoordinate2D, zoom: Swift.Float)
  func animate(pos: any MapsIndoors.MPCameraPosition)
  func animate(bounds: MapsIndoors.MPGeoBounds)
  func animate(target: CoreLocation.CLLocationCoordinate2D, zoom: Swift.Float?)
  var position: any MapsIndoors.MPCameraPosition { get }
  #if compiler(>=5.3) && $EffectfulProp
  var projection: any MapsIndoorsCore.MPProjection { get async }
  #endif
  func camera(for bounds: MapsIndoors.MPGeoBounds, inserts: UIKit.UIEdgeInsets) -> any MapsIndoors.MPCameraPosition
}
public protocol MapControlInternalExternalServices {
  var externalDirectionService: (any MapsIndoorsCore.MPExternalDirectionsService)? { get }
  var externalMatrixService: (any MapsIndoorsCore.MPExternalDistanceMatrixService)? { get }
}
public class MPTransitLineInternal : MapsIndoors.MPTransitLine, Swift.Codable {
  @objc public var agencies: [any MapsIndoors.MPTransitAgency]
  @objc public var color: Swift.String
  @objc public var icon: Swift.String
  @objc public var name: Swift.String
  @objc public var short_name: Swift.String
  @objc public var text_color: Swift.String
  @objc public var url: Swift.String
  @objc public var vehicle: any MapsIndoors.MPTransitVehicle
  public init(shortName: Swift.String, agencies: [any MapsIndoors.MPTransitAgency], vehicle: any MapsIndoors.MPTransitVehicle)
  public init(withTransitLine: any MapsIndoors.MPTransitLine)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol MPExternalDirectionsService {
  #if compiler(>=5.3) && $AsyncAwait
  func query(origin: CoreLocation.CLLocationCoordinate2D, destination: CoreLocation.CLLocationCoordinate2D, config: MapsIndoorsCore.MPDirectionsConfig) async throws -> (any MapsIndoors.MPRoute)?
  #endif
}
public struct MPDirectionsConfig {
  public init(origin: MapsIndoors.MPPoint, destination: MapsIndoors.MPPoint, stops: [MapsIndoors.MPPoint]? = nil, optimize: Swift.Bool = false, userRoles: [MapsIndoors.MPUserRole]? = nil, arrival: Foundation.Date? = nil, avoidTypes: [MapsIndoors.MPHighway]? = nil, departure: Foundation.Date? = Date(), excludeTypes: [MapsIndoors.MPHighway]? = nil, language: Swift.String? = nil, travelMode: MapsIndoors.MPTravelMode = .walking)
  public var arrival: Foundation.Date?
  public var avoidTypes: [MapsIndoors.MPHighway]?
  public var departure: Foundation.Date?
  public var destination: MapsIndoors.MPPoint
  public var excludeTypes: [MapsIndoors.MPHighway]?
  public var language: Swift.String?
  public var optimize: Swift.Bool
  public var origin: MapsIndoors.MPPoint
  public var stops: [MapsIndoors.MPPoint]?
  public var travelMode: MapsIndoors.MPTravelMode
  public var userRoles: [MapsIndoors.MPUserRole]?
  public var avoidWayTypesStrings: [Swift.String] {
    get
  }
  public var excludeWayTypesStrings: [Swift.String] {
    get
  }
}
public protocol MPExternalDistanceMatrixService {
  #if compiler(>=5.3) && $AsyncAwait
  func query(origins: [CoreLocation.CLLocationCoordinate2D], destinations: [CoreLocation.CLLocationCoordinate2D], config: MapsIndoorsCore.MPDirectionsConfig) async throws -> MapsIndoorsCore.MPDistanceMatrixResult?
  #endif
  func pruneDistanceMatrixDimensions(origins: [MapsIndoors.MPPoint], destinations: [MapsIndoors.MPPoint]) -> ([MapsIndoors.MPPoint], [MapsIndoors.MPPoint])
}
public class MPTransitTimeInternal : MapsIndoors.MPTransitTime, Swift.Codable {
  @objc public var text: Swift.String?
  @objc public var time_zone: Swift.String?
  @objc public var value: Foundation.NSNumber?
  public init(text: Swift.String?, timeZone: Swift.String?, value: Swift.Int)
  public init(withTransitTime: any MapsIndoors.MPTransitTime)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class MPRoutePropertyInternal : MapsIndoors.MPRouteProperty, Swift.Codable {
  @objc public var text: Swift.String?
  @objc public var value: Foundation.NSNumber?
  public init(withRouteProperty: any MapsIndoors.MPRouteProperty)
  public init(withValue: Foundation.NSNumber, withText: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(MPLogDomain) public enum MPLogDomain : Swift.Int, Swift.CustomStringConvertible {
  case appLifeTime
  case configuration
  case search
  case directions
  case liveData
  case map
  case locationSources
  case datasetManager
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MPLogEvent) public enum MPLogEvent : Swift.Int, Swift.CustomStringConvertible {
  case enteredForeground
  case enteredBackground
  case sdkLoaded
  case mapInstantiated
  case languageChanged
  case offlineModeChanged
  case searchPerformed
  case directionsRequested
  case directionsRendered
  case subscriptionStarted
  case subscriptionStopped
  case livedataEnabledForMap
  case mapClicked
  case clusteringModeChanged
  case locationSourcesRegistered
  case datasetAdded
  case datasetRemoved
  case datasetSynchronized
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MPMapProviderDelegate : MapsIndoorsCore.MPCameraEventDelegate {
  func didTap(coordinate: CoreLocation.CLLocationCoordinate2D)
  func didTap(locationId: Swift.String, type: MapsIndoorsCore.MPRenderedFeatureType) -> Swift.Bool
  func didTapInfoWindowOf(locationId: Swift.String) -> Swift.Bool
}
public protocol MPCameraEventDelegate : AnyObject {
  func cameraWillMove()
  func cameraChangedPosition()
  func cameraIdle()
}
public protocol MPPositionPresenter {
  func apply(position: CoreLocation.CLLocationCoordinate2D, markerIcon: UIKit.UIImage, markerBearing: Swift.Double, markerOpacity: Swift.Double, circleRadiusMeters: Swift.Double, circleFillColor: UIKit.UIColor, circleStrokeColor: UIKit.UIColor, circleStrokeWidth: Swift.Double)
  func clear()
}
extension MapsIndoors.MPMapConfig {
  public var mapProvider: (any MapsIndoorsCore.MPMapProvider)? {
    get
    set
  }
}
public protocol MPRouteRenderer {
  var routeMarkerDelegate: (any MapsIndoorsCore.MPRouteMarkerDelegate)? { get set }
  func apply(model: MapsIndoorsCore.RouteViewModelProducer, animate: Swift.Bool, duration: Foundation.TimeInterval, repeating: Swift.Bool, primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, primaryWidth: Swift.Float, secondaryWidth: Swift.Float, pathSmoothing: Swift.Bool)
  func moveCamera(points: [CoreLocation.CLLocationCoordinate2D], animate: Swift.Bool, durationMs: Swift.Int, tilt: Swift.Float, fitMode: MapsIndoors.MPCameraViewFitMode, padding: UIKit.UIEdgeInsets)
  func clear()
}
@objc public protocol MPRouteMarkerDelegate {
  @objc func onRouteMarkerClicked(tag: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class RouteViewModelProducer : ObjectiveC.NSObject {
  public var polyline: [CoreLocation.CLLocationCoordinate2D]
  public var start: (any MapsIndoorsCore.MPViewModel)?
  public var end: (any MapsIndoorsCore.MPViewModel)?
  public var stops: [any MapsIndoorsCore.MPViewModel]?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MapsIndoorsCore.MPBuildingInternal {
  @objc dynamic public var entityPosition: MapsIndoors.MPPoint {
    @objc get
  }
  @objc dynamic public var entityBounds: MapsIndoors.MPGeoBounds {
    @objc get
  }
  @objc dynamic public var entityIsPoint: Swift.Bool {
    @objc get
  }
}
@objc extension MapsIndoorsCore.MPFloorInternal {
  @objc dynamic public var entityPosition: MapsIndoors.MPPoint {
    @objc get
  }
  @objc dynamic public var entityBounds: MapsIndoors.MPGeoBounds {
    @objc get
  }
  @objc dynamic public var entityIsPoint: Swift.Bool {
    @objc get
  }
}
@objc extension MapsIndoorsCore.MPVenueInternal {
  @objc dynamic public var entityPosition: MapsIndoors.MPPoint {
    @objc get
  }
  @objc dynamic public var entityBounds: MapsIndoors.MPGeoBounds {
    @objc get
  }
  @objc dynamic public var entityIsPoint: Swift.Bool {
    @objc get
  }
}
@objc extension MapsIndoorsCore.MPLocationInternal {
  @objc dynamic public var entityPosition: MapsIndoors.MPPoint {
    @objc get
  }
  @objc dynamic public var entityBounds: MapsIndoors.MPGeoBounds {
    @objc get
  }
  @objc dynamic public var entityIsPoint: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MPRouteLegInternal : ObjectiveC.NSObject, MapsIndoors.MPRouteLeg, Swift.Codable {
  @objc public var distance: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var end_address: Swift.String
  @objc public var end_location: any MapsIndoors.MPRouteCoordinate
  @objc public var legStartReason: MapsIndoors.MPRouteLegBreakReason
  @objc public var legEndReason: MapsIndoors.MPRouteLegBreakReason
  @objc public var routeLegType: MapsIndoors.MPRouteLegType
  @objc public var start_address: Swift.String
  @objc public var start_location: any MapsIndoors.MPRouteCoordinate
  @objc public var steps: [any MapsIndoors.MPRouteStep]
  @objc public var stopIndex: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc public init(withRouteLeg: any MapsIndoors.MPRouteLeg)
  @objc public func addStep(_ step: any MapsIndoors.MPRouteStep)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum MPRenderedFeatureType : Swift.String, Swift.Codable {
  case undefined
  case marker
  case polygon
  case model2d
  case model3d
  case floorplan
  case featureExtrusion
  case wallExtrusion
  case graphicLabel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(MPLoggingConfig) public class MPLoggingConfig : ObjectiveC.NSObject {
  @objc public static let eventLogging: MapsIndoorsCore.MPLoggingConfig
  @objc public static let noLogging: MapsIndoorsCore.MPLoggingConfig
  @objc public var eventLoggingEnabled: Swift.Bool {
    get
  }
  @objc public init(jsonDictionary: [Swift.String : Swift.Bool])
  @objc deinit
}
@objc(MPBackendDetails) public class MPBackendDetails : ObjectiveC.NSObject, MapsIndoors.MPAuthDetails, Swift.Decodable {
  @objc public var authIssuer: Swift.String {
    get
  }
  @objc final public let authScope: Swift.String
  @objc public var isAuthRequired: Swift.Bool {
    get
  }
  @objc public var authClients: [any MapsIndoors.MPAuthClientInfo] {
    get
  }
  @objc public var sessionToken: Swift.String {
    get
  }
  @objc public class func fromJSONDictionary(_ dict: [Swift.String : Any]) throws -> MapsIndoorsCore.MPBackendDetails
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public protocol MPCameraUpdate {
  @objc func fitBounds(_ bounds: MapsIndoors.MPGeoBounds) -> any MapsIndoorsCore.MPCameraUpdate
  @objc func fitBoundsWithPadding(_ bounds: MapsIndoors.MPGeoBounds, padding: CoreFoundation.CGFloat) -> any MapsIndoorsCore.MPCameraUpdate
  @objc func fitBoundsWithEdgeInserts(_ bounds: MapsIndoors.MPGeoBounds, edgeInsets: UIKit.UIEdgeInsets) -> any MapsIndoorsCore.MPCameraUpdate
}
public protocol MPProjection {
  #if compiler(>=5.3) && $EffectfulProp
  var visibleRegion: MapsIndoors.MPGeoRegion { get async }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func coordinateFor(point: CoreFoundation.CGPoint) async -> CoreLocation.CLLocationCoordinate2D
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func pointFor(coordinate: CoreLocation.CLLocationCoordinate2D) async -> CoreFoundation.CGPoint
  #endif
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MPRouteCoordinateInternal : ObjectiveC.NSObject, MapsIndoors.MPRouteCoordinate, Swift.Codable {
  @objc public var floor_name: Swift.String?
  @objc public var label: Swift.String?
  @objc public var lat: Foundation.NSNumber
  @objc public var lng: Foundation.NSNumber
  @objc public var zLevel: Foundation.NSNumber
  @objc override dynamic public init()
  @objc public init(latitude: Swift.Double = 0, longitude: Swift.Double = 0, floorIndex: Swift.Double = 0)
  @objc public init(withRouteCoordinate: any MapsIndoors.MPRouteCoordinate)
  @objc public init(withPoint: MapsIndoors.MPPoint)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MPLocationUpdateInternal : ObjectiveC.NSObject, MapsIndoors.MPLocationUpdate {
  @objc public var sourceId: Swift.Int
  @objc public var locationId: Swift.String
  @objc public var type: Swift.String
  @objc public var name: Swift.String
  @objc public var floorIndex: Swift.Int
  @objc public var position: CoreLocation.CLLocationCoordinate2D
  @objc public var iconMapAnchor: CoreFoundation.CGPoint
  @objc public var categories: [Swift.String]?
  @objc public var properties: [MapsIndoorsCore.MPLocationFieldInternal]?
  @objc public var prototypeLocation: (any MapsIndoors.MPLocation)?
  @objc public static func updateWithLocation(location: any MapsIndoors.MPLocation) -> any MapsIndoors.MPLocationUpdate
  @objc public static func updateWithId(locationId: Swift.String, fromSource locationSource: any MapsIndoors.MPLocationSource) -> any MapsIndoors.MPLocationUpdate
  @objc(addPropertyValue:forKey:) public func addPropertyValue(value: Swift.String, forKey key: Swift.String)
  @objc(addCategory:) public func addCategory(categoryKey: Swift.String)
  @objc public func location() -> any MapsIndoors.MPLocation
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class MPLocationUpdateInternalFactory : MapsIndoors.MPLocationUpdateFactory {
  @objc(updateWithLocation:) public func updateWithLocation(location: any MapsIndoors.MPLocation) -> any MapsIndoors.MPLocationUpdate
  @objc(updateWithId:fromSource:) public func updateWithId(locationId: Swift.String, fromSource locationSource: any MapsIndoors.MPLocationSource) -> any MapsIndoors.MPLocationUpdate
  @objc deinit
}
public class MPTileProvider {
  required public init(venue: MapsIndoorsCore.MPVenueInternal, floor: Swift.Int, tileSize: Swift.Int)
  public func getTile(x: Swift.UInt, y: Swift.UInt, zoom: Swift.UInt) -> UIKit.UIImage?
  public func getTileUrl(zoom: Swift.UInt, x: Swift.UInt, y: Swift.UInt) -> Swift.String
  public func tileSize() -> Swift.Double
  public func templateUrl() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MPCategoriesProvider) public class MPCategoriesProvider : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func categories() async throws -> [any MapsIndoors.MPDataField]
  #endif
  @objc public class func isOfflineDataAvailableForSolutionId(_ solutionId: Swift.String, language: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public protocol MPMapProvider : AnyObject {
  var view: UIKit.UIView? { get }
  var padding: UIKit.UIEdgeInsets { get set }
  var MPaccessibilityElementsHidden: Swift.Bool { get set }
  var delegate: (any MapsIndoorsCore.MPMapProviderDelegate)? { get set }
  var positionPresenter: any MapsIndoorsCore.MPPositionPresenter { get }
  var customInfoWindow: (any MapsIndoors.MPCustomInfoWindow)? { get set }
  var routeRenderer: any MapsIndoorsCore.MPRouteRenderer { get }
  var collisionHandling: MapsIndoors.MPCollisionHandling { get set }
  var wallExtrusionOpacity: Swift.Double { get set }
  var featureExtrusionOpacity: Swift.Double { get set }
  var cameraOperator: any MapsIndoorsCore.MPCameraOperator { get }
  var enableNativeMapBuildings: Swift.Bool { get set }
  var model2DResolutionLimit: Swift.Int { get }
  var routingService: any MapsIndoorsCore.MPExternalDirectionsService { get }
  var distanceMatrixService: any MapsIndoorsCore.MPExternalDistanceMatrixService { get }
  func setViewModels(models: [any MapsIndoorsCore.MPViewModel], forceClear: Swift.Bool)
  func setTileProvider(tileProvider: MapsIndoorsCore.MPTileProvider)
  func reloadTilesForFloorChange()
}
@_inheritsConvenienceInitializers @objc public class MPInternalStringUtils : ObjectiveC.NSObject {
  @objc public static func hashOf(_ string: Swift.String) -> Swift.Int32
  @objc override dynamic public init()
  @objc deinit
}
public struct MPViewModelFeature : Swift.Encodable, Swift.Hashable {
  public var id: Swift.String
  public var properties: [MapsIndoorsCore.MPModelPropertyKey : any Swift.Encodable]
  public var geometry: MapsIndoorsCore.MPViewModelFeatureGeometry
  public func encode(to encoder: any Swift.Encoder) throws
  public func toGeoJson(pretty: Swift.Bool = false) -> Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension MapsIndoorsCore.MPViewModelFeature {
  public static func == (lhs: MapsIndoorsCore.MPViewModelFeature, rhs: MapsIndoorsCore.MPViewModelFeature) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public struct MPViewModelFeatureGeometry : Swift.Encodable {
  public let type: MapsIndoorsCore.GeoJsonGeometryType
  public let coordinates: any Swift.Encodable
  public func encode(to encoder: any Swift.Encoder) throws
}
public class MPTransitStopInternal : MapsIndoors.MPTransitStop, Swift.Codable {
  @objc public var location: any MapsIndoors.MPRouteCoordinate
  @objc public var name: Swift.String
  public init(name: Swift.String, location: any MapsIndoors.MPRouteCoordinate)
  public init(withTransitStop: any MapsIndoors.MPTransitStop)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public typealias Key = MapsIndoorsCore.MPModelPropertyKey
public enum MPModelPropertyKey : Swift.String {
  case polygonFillcolor
  case polygonFillcolorAlpha
  case polygonFillOpacity
  case polygonStrokeColor
  case polygonStrokeColorAlpha
  case polygonStrokeOpacity
  case polygonStrokeWidth
  case polygonArea
  case markerLabel
  case markerLabelInfoWindow
  case markerId
  case markerIconPlacement
  case locationName
  case markerGeometryArea
  case hasImage
  case isCollidable
  case isClusterable
  case labelFont
  case labelSize
  case labelOffset
  case labelAnchor
  case labelMaxWidth
  case labelColor
  case labelHaloColor
  case labelOpacity
  case labelHaloWidth
  case labelHaloBlur
  case labelBearing
  case labelGraphicId
  case labelGraphicStretchX
  case labelGraphicStretchY
  case labelGraphicContent
  case labelType
  case model2dId
  case model2dBearing
  case model2DWidth
  case model2DHeight
  case model2DScale
  case model3dId
  case model3dUri
  case model3DRotation
  case model3DScale
  case wallExtrusionHeight
  case wallExtrusionColor
  case featureExtrusionHeight
  case featureExtrusionColor
  case floorPlanStrokeColor
  case floorPlanStrokeColorAlpha
  case floorPlanStrokeWidth
  case floorPlanStrokeOpacity
  case floorPlanFillColor
  case floorPlanFillColorAlpha
  case floorPlanFillOpacity
  case type
  case miType
  case clickable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MPModelError : Swift.Error {
  case IllegalStateException
  case IllegalGeoJsonGeometryType
  public static func == (a: MapsIndoorsCore.MPModelError, b: MapsIndoorsCore.MPModelError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GeoJsonGeometryType : Swift.String {
  case Point
  case MultiPoint
  case LineString
  case MultiLineString
  case Polygon
  case MultiPolygon
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MPModelData {
  case icon
  case model2D
  case model3D
  case graphicLabelImage
  public static func == (a: MapsIndoorsCore.MPModelData, b: MapsIndoorsCore.MPModelData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MPTransitVehicleInternal : MapsIndoors.MPTransitVehicle, Swift.Codable {
  @objc public var icon: Swift.String?
  @objc public var local_icon: Swift.String?
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  public init(icon: Swift.String?, name: Swift.String?, type: Swift.String?)
  public init(withTransitVehicle: any MapsIndoors.MPTransitVehicle)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MPRouteInternal : ObjectiveC.NSObject, MapsIndoors.MPRoute, Swift.Codable {
  @objc public var bounds: (any MapsIndoors.MPRouteBounds)?
  @objc public var copyrights: Swift.String?
  @objc public var distance: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var legs: [any MapsIndoors.MPRouteLeg]
  @objc public var orderedStopIndexes: [Swift.Int]?
  @objc public var overview_polyline: (any MapsIndoors.MPEncodedPolyline)?
  @objc public var restrictions: [Swift.String]
  @objc public var summary: Swift.String?
  @objc public var warnings: [Swift.String]
  @objc override dynamic public init()
  @objc public init(withRoute: any MapsIndoors.MPRoute)
  @objc public func addLeg(_ leg: any MapsIndoors.MPRouteLeg)
  @objc public func findNearestRouteSegmentPathFromPoint(_ point: MapsIndoors.MPPoint, floorIndex: Foundation.NSNumber) -> MapsIndoors.MPRouteSegmentPath
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MPLogger) public class MPLogger : ObjectiveC.NSObject {
  @objc public var apiKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var configuration: MapsIndoorsCore.MPLoggingConfig
  @objc public static let sharedInstance: MapsIndoorsCore.MPLogger
  @objc deinit
  @objc public static func event(name: MapsIndoorsCore.MPLogEvent, domain: MapsIndoorsCore.MPLogDomain)
  @objc public static func event(name: MapsIndoorsCore.MPLogEvent, domain: MapsIndoorsCore.MPLogDomain, parameters: [Swift.String : Swift.String]?)
  @objc public func uploadLog()
  @objc public func reachabilityDidChange(notification: Foundation.Notification)
}
public struct MPDistanceMatrixResult : Swift.Codable {
  public var destination_addresses: [Swift.String]?
  public var origin_addresses: [Swift.String]?
  public var rows: [MapsIndoorsCore.MPDistanceMatrixRows]?
  public var status: Swift.String?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MPDistanceMatrixRows : Swift.Codable {
  public var elements: [MapsIndoorsCore.MPDistanceMatrixElements]?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MPDistanceMatrixElements : Swift.Codable {
  public var distance: MapsIndoorsCore.MPRoutePropertyInternal?
  public var duration: MapsIndoorsCore.MPRoutePropertyInternal?
  public var status: Swift.String?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MPRouteNetworkEntryPoint : MapsIndoors.MPPoint {
  @objc public var boundaryType: MapsIndoorsCore.MPBoundaryType {
    @objc get
  }
  @objc public var label: Swift.String?
  @objc public static func new(entryPointNode: MapsIndoorsCore.MPGraphNode) -> MapsIndoorsCore.MPRouteNetworkEntryPoint
  @objc override public func `init`(dictionary dict: [Swift.AnyHashable : Any]!) throws -> MapsIndoorsCore.MPRouteNetworkEntryPoint
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MPMapsIndoors : ObjectiveC.NSObject {
  @objc public static var shared: any MapsIndoors.MapsIndoorsShared {
    @objc get
  }
  @objc public static func createMapControl(mapConfig: MapsIndoors.MPMapConfig) -> (any MapsIndoors.MPMapControl)?
  @objc public static func createLocationUpdateFactory() -> any MapsIndoors.MPLocationUpdateFactory
  @objc deinit
}
@objc public protocol MapsIndoorsInternalActiveMapControl {
  @objc var activeMapControlInstance: (any MapsIndoors.MPMapControl)? { get set }
}
public class MPTransitAgencyInternal : MapsIndoors.MPTransitAgency, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var url: Swift.String?
  public init(name: Swift.String?, url: Swift.String?)
  public init(withTransitAgency: any MapsIndoors.MPTransitAgency)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(MPDataProvider) public class MPDataProvider : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $AsyncAwait
  @objc(dataWithContentsOfURL:ifModifiedSince:headers:completionHandler:) public static func data(withContentsOf url: Foundation.URL, ifModifiedSince: Swift.String?, headers: [Swift.String : Swift.String]?) async throws -> (data: Foundation.Data?, response: Foundation.HTTPURLResponse?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc(dataWithContentsOfURL:ifModifiedSince:headers:waitForSessionToken:completionHandler:) public static func data(withContentsOf url: Foundation.URL, ifModifiedSince: Swift.String?, headers: [Swift.String : Swift.String]?, waitForSessionToken: Swift.Bool) async throws -> (data: Foundation.Data?, response: Foundation.HTTPURLResponse?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc(downloadContentsOfURL:toFile:ifModifiedSince:completionHandler:) public static func downloadContents(of url: Foundation.URL, toFile: Swift.String, ifModifiedSince: Swift.String?) async throws -> (filePath: Swift.String, response: Foundation.HTTPURLResponse?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc(uploadContentsOfFile:toUrl:completionHandler:) public static func uploadContentsofFile(filePath: Swift.String, toUrl: Foundation.URL) async throws -> (data: Foundation.Data?, response: Foundation.HTTPURLResponse?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc(postJsonObject:toURL:headers:completionHander:) public static func postJsonObject(_ json: Any?, to url: Foundation.URL, headers: [Swift.String : Swift.String]?) async throws -> (data: Foundation.Data?, response: Foundation.HTTPURLResponse?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc(deleteJsonObject:toURL:headers:completionHander:) public static func deleteJsonObject(_ json: Any?, to url: Foundation.URL, headers: [Swift.String : Swift.String]?) async throws -> (data: Foundation.Data?, response: Foundation.HTTPURLResponse?)
  #endif
  @objc override dynamic public init()
  @objc deinit
}
public class MPEncodedPolylineInternal : MapsIndoors.MPEncodedPolyline, Swift.Codable {
  @objc public var points: Swift.String?
  public init()
  public init(withEncodedPolyline: any MapsIndoors.MPEncodedPolyline)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class InfoWindowUtils : ObjectiveC.NSObject {
  public static func infoWindowView(label: Swift.String?, color: UIKit.UIColor, fontColor: UIKit.UIColor, boxHeight: Swift.Int, boxWidth: Swift.Int) -> UIKit.UIView
  public static func boxSize(for text: Swift.String?, maxWidth: CoreFoundation.CGFloat, maxHeight: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MPMIAPIConfig : ObjectiveC.NSObject {
  @objc public static let apiVersion: Swift.String
  @objc public static let baseURL: Swift.String
  @objc public static let baseDevURL: Swift.String
  @objc public static let baseStagingURL: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.NSDate {
  @objc dynamic public var mp_asHTTPDate: Swift.String? {
    @objc get
  }
  @objc dynamic public var mp_asUtcIso8601: Swift.String {
    @objc get
  }
  @objc public static func mp_fromUtcIso8601(_ s: Swift.String) -> Foundation.NSDate?
}
extension MapsIndoorsCore.MPLiveDataManagerState : Swift.Equatable {}
extension MapsIndoorsCore.MPLiveDataManagerState : Swift.Hashable {}
extension MapsIndoorsCore.MPLiveDataManagerState : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPLogDomain : Swift.Equatable {}
extension MapsIndoorsCore.MPLogDomain : Swift.Hashable {}
extension MapsIndoorsCore.MPLogDomain : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPLogEvent : Swift.Equatable {}
extension MapsIndoorsCore.MPLogEvent : Swift.Hashable {}
extension MapsIndoorsCore.MPLogEvent : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPRenderedFeatureType : Swift.Equatable {}
extension MapsIndoorsCore.MPRenderedFeatureType : Swift.Hashable {}
extension MapsIndoorsCore.MPRenderedFeatureType : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPModelPropertyKey : Swift.Equatable {}
extension MapsIndoorsCore.MPModelPropertyKey : Swift.Hashable {}
extension MapsIndoorsCore.MPModelPropertyKey : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPModelError : Swift.Equatable {}
extension MapsIndoorsCore.MPModelError : Swift.Hashable {}
extension MapsIndoorsCore.GeoJsonGeometryType : Swift.Equatable {}
extension MapsIndoorsCore.GeoJsonGeometryType : Swift.Hashable {}
extension MapsIndoorsCore.GeoJsonGeometryType : Swift.RawRepresentable {}
extension MapsIndoorsCore.MPModelData : Swift.Equatable {}
extension MapsIndoorsCore.MPModelData : Swift.Hashable {}
